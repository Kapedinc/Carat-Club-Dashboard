/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/
import React from 'react';
import Ellipse3Image from 'src/assets/images/Cell_Ellipse_3.png';
import { styled } from '@mui/material/styles';
import Badge1 from 'src/components/Badge1/Badge1';
import { CellProps } from 'src/types';
const TypeImage2Lines = styled('div')({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    width: '100%',
    justifyContent: `flex-start`,
    alignItems: `center`,
    padding: `0px`,
    boxSizing: `border-box`,
    height: 'auto',
});
const Ellipse3 = styled('img')({
    height: `40px`,
    width: `40px`,
    objectFit: `cover`,
    margin: `0px`,
});
const Frame26 = styled('div')({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `0px 0px 0px 16px`,
});
const Label = styled('div')(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: `rgba(33, 37, 41, 1)`,
    fontStyle: `normal`,
    fontFamily: `Inter`,
    fontWeight: `500`,
    fontSize: `14px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `20px`,
    textTransform: `none`,
    margin: `0px`,
}));
const SecondLabel = styled('div')(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: `rgba(134, 142, 150, 1)`,
    fontStyle: `normal`,
    fontFamily: `Inter`,
    fontWeight: `400`,
    fontSize: `13px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `18px`,
    textTransform: `none`,
    margin: `4px 0px 0px 0px`,
}));
const Frame261 = styled('div')({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    margin: `0px 0px 0px 16px`,
});
const Label1 = styled('div')(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: `rgba(33, 37, 41, 1)`,
    fontStyle: `normal`,
    fontFamily: `Inter`,
    fontWeight: `500`,
    fontSize: `14px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `20px`,
    textTransform: `none`,
    margin: `0px`,
}));
const SecondLabel1 = styled('div')(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: `rgba(134, 142, 150, 1)`,
    fontStyle: `normal`,
    fontFamily: `Inter`,
    fontWeight: `400`,
    fontSize: `13px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `18px`,
    textTransform: `none`,
    margin: `4px 0px 0px 0px`,
}));
const Label2 = styled('div')(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: `rgba(33, 37, 41, 1)`,
    fontStyle: `normal`,
    fontFamily: `Inter`,
    fontWeight: `400`,
    fontSize: `14px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `20px`,
    textTransform: `none`,
    margin: `0px 0px 0px 16px`,
}));
const Label3 = styled('div')(({ theme }) => ({
    textAlign: `right`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: `rgba(33, 37, 41, 1)`,
    fontStyle: `normal`,
    fontFamily: `Inter`,
    fontWeight: `500`,
    fontSize: `14px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `20px`,
    textTransform: `none`,
    margin: `0px 0px 0px 16px`,
}));
const Label4 = styled('div')(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: `rgba(134, 142, 150, 1)`,
    fontStyle: `normal`,
    fontFamily: `Inter`,
    fontWeight: `400`,
    fontSize: `14px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `20px`,
    textTransform: `none`,
    margin: `0px 0px 0px 16px`,
}));
const Label5 = styled('div')(({ theme }) => ({
    textAlign: `right`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: `rgba(134, 142, 150, 1)`,
    fontStyle: `normal`,
    fontFamily: `Inter`,
    fontWeight: `400`,
    fontSize: `14px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `20px`,
    textTransform: `none`,
    margin: `0px 0px 0px 16px`,
}));
const Badge2 = styled(Badge1)(({ theme }) => ({
    margin: `0px 0px 0px 16px`,
}));
function Cell(props) {
    return (React.createElement(TypeImage2Lines, { className: props.className },
        React.createElement(Ellipse3, { src: Ellipse3Image, loading: "lazy", alt: 'Ellipse 3' }),
        React.createElement(Frame26, null,
            React.createElement(Label, null, `Label`),
            React.createElement(SecondLabel, null, `Second Label`)),
        false && (React.createElement(Frame261, null,
            React.createElement(Label1, null, `Label`),
            React.createElement(SecondLabel1, null, `Second Label`))),
        false && React.createElement(Label2, null, `Label`),
        false && React.createElement(Label3, null, `Label`),
        false && React.createElement(Label4, null, `Label`),
        false && React.createElement(Label5, null, `Label`),
        false && React.createElement(Badge2, null)));
}
export default Cell;
//# sourceMappingURL=Cell.js.map